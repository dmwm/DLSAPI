#!/usr/bin/env python
# $Id: dls-server,v 1.10 2006/09/24 17:17:20 afanfani Exp $

import Queue
import socket
import threading
import MySQLdb
import sys
import time
import pdb
import getopt
import logging
from logging.handlers import RotatingFileHandler

class ClientThread ( threading.Thread ):

   class Internal_Error(Exception):
      def __init__(self, value,status):
         self.value = value
         self.status= status
      def __str__(self):
         return repr(self.value)
      def arg(self,value):
         if value==0:
            return self.value
         elif  value==1:
            return self.status
      
   # Note that we do not override Thread's __init__ method.
   # The Queue module makes this not necessary.
   def __init__(self,clientPool,host,user,passwd,database,dbsocket,verbose):

      """ Initialize the thread and remember the pool. """
   
      threading.Thread.__init__(self)
      self.__isDying = False
      self.__clientPool=clientPool
      self.__verbose=verbose
      self.__conn = DLS_db(host,user,passwd,database,dbsocket,verbose)      
      self.__isConnected=False
      self.__isWaiting=False

   def isConnected(self):
      return self.__isConnected
   def isWaiting(self):
      return self.__isWaiting

   def run ( self ):
      #pdb.set_trace()
      # Have our thread serve "forever":
      try:
         self.__conn.connect()
      
         self.__isConnected=True
      except DLS_db.Error, e:
         msg= "Thread: "+self.getName()+" -> "+str(e)
         self.__isDying == True
         logging.error(msg)
         raise ClientThread.Internal_Error(msg,False)
         


      while self.__isDying == False:
         try:
            # Get a client out of the queue
            # print "Client:",self.__clientPool
            self.__isWaiting=True
            self.__client = self.__clientPool.get()
         
            


            #pdb.set_trace()
            # Check if we actually have an actual client in the client variable:
            
            
            if self.__client=="Stop":
               logging.info("Stopping Thread=%s"%(self.getName()))             
               #print "Stopping Thread=%s"%(self.getName())
               self.__isDying = True
               self.__client [ 0 ].close()
               logging.info("Closed connection: %s"%self.__client [ 1 ] [ 0 ])
               #print 'Closed connection:', self.__client [ 1 ] [ 0 ]
               break
            elif self.__client != None:
               logging.info("Received connection:%s"%self.__client[ 1 ] [ 0 ])
               #print 'Received connection:', self.__client [ 1 ] [ 0 ]
               logging.info("Thread %s"%self.getName())
               #print "Thread",self.getName()


               

            
            
               try:
                  msg=self.dls_receive()
               except:
                  msg=None
               
               #if  self.__verbose:
               #   print  msg

               if msg:
                  if msg.count("replica#")>0 or msg.count("by_se#")>0 or msg.count("by_db#")>0:
                   command=msg.split("#")
                  else:
                   command=msg.split("?")

                  if self.__verbose:
                     logging.info(command)
                     #print command
                     ##pdb.set_trace()
            
                  if command[0]=="add_replica":
                     #logging.debug("add_replica")
                     #print "add_replica"
                     msg=self.__conn.add_replica(command[1],command[2])
                     self.dls_send(str(msg))
                  elif command[0]=="remove_replica":
                     #logging.debug("remove_replica")
                     #print "remove_replica"
                     msg=self.__conn.del_replica(command[1],command[2])
                     self.dls_send(str(msg))
                  elif command[0]=="show_replica_by_db":
                     #logging.debug("show_replica_by_db")
                     #print "show_replica_by_db"
                     self.__conn.get_se_from_db(command[1])
                     rows=self.__conn.fetchall()
                     msg=""
                     first=True
                     for row in rows:
                        if first:
                           msg=msg+row[0]
                           first=False
                        else:
                           msg=msg+'\n'+row[0]
                     self.dls_send(msg)
                  elif command[0]=="show_replica_by_se":
                     #logging.debug("show_replica_by_db")
                     #print "show_replica_by_db"
                     self.__conn.get_db_from_se(command[1])
                     rows=self.__conn.fetchall()
                     msg=""
                     first=True
                     for row in rows:
                        if first:
                           msg=msg+row[0]
                           first=False
                        else:
                           msg=msg+'\n'+row[0]
                     self.dls_send(msg)
                  elif command[0]=="show_allreplicas":
                     self.__conn.get_ses()
                     rows=self.__conn.fetchall()
                     msg=""
                     first=True
                     for row in rows:
                        if first:
                           msg=msg+row[0]
                           first=False
                        else:
                           msg=msg+'\n'+row[0]
                     self.dls_send(msg)
                  elif command[0]=="rename_db":
                     msg=self.__conn.rename_fileblock(command[1],command[2])
                     self.dls_send(str(msg))

                  
            if self.__client:
               self.__client [ 0 ].close()
               logging.info("Closed connection: %s"%self.__client [ 1 ] [ 0 ])
               #print 'Closed connection:', self.__client [ 1 ] [ 0 ]

         except:
            self.__isDying = True
         
         
      if self.__conn:
         self.__conn.disconnect()
         self.__isConnected=False
         
   def dls_send(self,msg):
            totalsent=0
            
            MSGLEN=len(msg)
            sent=self.__client [ 0 ].send(str(MSGLEN).zfill(16))
            #logging.debug("Sent %s"%(str(MSGLEN).zfill(16)))
            #print "Sent %s"%(str(MSGLEN).zfill(16))
            
            if sent == 0:
               logging.error("Socket connection broken")
               raise RuntimeError,"Socket connection broken"
            else:
               while totalsent < MSGLEN:
                  sent = self.__client [ 0 ].send(msg[totalsent:])
                  logging.info("Sent %s"%(msg[totalsent:]))
                  #print "Sent %s"%(msg[totalsent:])
                  if sent == 0:
                     logging.error("Socket connection broken")
                     raise RuntimeError,"Socket connection broken"
                  totalsent = totalsent + sent


   def dls_receive(self):

      try:
         chunk =  self.__client [ 0 ].recv(16)
      except:
         if self.__verbose:
            logging.error("Connection Timeout")
            print "Connection Timeout"
            return None

      #logging.debug("Recieved %s"%(chunk))
      #print "Recieved %s"%(chunk)
      if chunk == '':
         logging.error("Socket connection broken") 
         raise RuntimeError,"Socket connection broken"
      MSGLEN= int(chunk)
      msg = ''
      while len(msg) < MSGLEN:
         try:
            chunk =  self.__client [ 0 ].recv(MSGLEN-len(msg))
         except:
            logging.error("Connection Timeout")
            print "Connection Timeout"
            return None

         logging.info("Recieved %s"%(chunk))   
         #print "Recieved %s"%(chunk)
         if chunk == '':
            logging.error("Socket connection broken")
            raise RuntimeError,"Socket connection broken"
         msg = msg + chunk
      return msg


   
   



   def kill(self):
      self.__isDying = True


      
class DLS_db:

   class Error(Exception):
      def __init__(self, value):
         self.value = value
      def __str__(self):
         return repr(self.value)

   class Warning(Exception):
      def __init__(self, value):
         self.value = value
      def __str__(self):
         return repr(self.value)

   def __init__(self,host,user,passwd,database,dbsocket,verbose):
      self.__host=host
      self.__user=user
      self.__passwd=passwd
      self.__database=database
      self.__dbsocket=dbsocket
      self.__verbose=verbose
      self.__cursor= None
      self.__conn=None
      #self.__transacion_query="START TRANSACTION"


   def connect(self):
      #pdb.set_trace()
      try:
         if self.__dbsocket==None:
           self.__conn = MySQLdb.connect (self.__host,self.__user,self.__passwd,self.__database)
         else:
           self.__conn = MySQLdb.connect (host = self.__host,
                               user = self.__user,
                               passwd = self.__passwd,
                               db = self.__database,
                               unix_socket = self.__dbsocket )
         ## enable autocommit (by default it is disabled)
         self.__conn.autocommit(1)
         self.__cursor = self.__conn.cursor()
      except MySQLdb.Error, e:
         logging.error("DLS_db Connection error: %s  %s"%(e.args[0], e.args[1]))
         raise DLS_db.Error("DLS_db Connection error: %s  %s"%(e.args[0], e.args[1]))

   def disconnect(self):
      try:
         if self.__cursor:
            self.__cursor.close()
         if self.__conn:
            self.__conn.close()
      except MySQLdb.Error, e:
         logging.error("DLS_db Disconnection error:%s %s"%(e.args[0], e.args[1]))
         raise DLS_db.Error("DLS_db Disconnection error:%s %s"%(e.args[0], e.args[1]))

   def fetchone(self):
      if self.__cursor:
         return self.__cursor.fetchone()
   
   def fetchall(self):
      if self.__cursor:
         return self.__cursor.fetchall()

   def begin_transaction(self):
      #self.__conn.begin()
      self.__in_transaction_begined=True
      
   def commit_transaction(self):
      self.__conn.commit()
      self.__in_transaction_begined=False

   def rollback_transaction(self):
      self.__conn.rollback()   
      self.__in_transaction_begined=False

   def last_insert_id(self,table):
     self.execute_query("SELECT LAST_INSERT_ID() FROM %s"%(table))
     row=self.__cursor.fetchone()
     if row:
          return row[0]
     else:
          return None
         
#   def last_insert_id(self):
#         return self.__cursor.insert_id()
   
   def execute_query(self,query):
      if self.__verbose:
         logging.debug(query)
         #print query
      try:
           self.__cursor.execute(query)
      except MySQLdb.Error, e:
         if self.__in_transaction_begined:
            self.rollback_transaction()
         logging.error("DLS_db Query:'%s' error:%s"%(query,e.args[0], e.args[1]))
         raise DLS_db.Error("DLS_db Query:'%s' error:%s"%(query,e.args[0], e.args[1]))

   def select_id(self,table,field_id,field,value):
       self.execute_query("SELECT %s FROM %s WHERE %s='%s'"%(field_id,table,field,value))
       row=self.__cursor.fetchone()
       if row:
          return row[0]
       else:
          return None


   def select_relation_id(self,table,id1,id1value,id2,id2value):
      self.execute_query("SELECT %s,%s FROM %s WHERE %s=%d AND %s=%d"%(id1,id2,table,id1,id1value,id2,id2value))
      row=self.__cursor.fetchone()
      if row:
         return [row[0],row[1]]
      else:
         return None

   def insert(self,table,field_id,field,value):
      id=self.select_id(table,field_id,field,value)
      if id==None:
         self.execute_query("INSERT INTO %s (%s) VALUES ('%s')"%(table,field,value))
         id=self.last_insert_id(table)
      return id
      
   def insert_relation(self,table,id1,id1value,id2,id2value):

      if not self.select_relation_id(table,id1,id1value,id2,id2value):
         self.execute_query("INSERT INTO %s (%s,%s) VALUES (%d,%d)"%(table,id1,id2,id1value,id2value))
         return 0
      else:
         return 1
      
   def delete_by_id(self,table,field_id,field,value):
      self.self.execute_query("SELECT %id FROM  %s WHERE %s=%d"%(table,field,value))
      


   def delete_by_value(self,table,field_id,field,value):
      id=self.select_id(table,field_id,field,value)
      if id:
         self.execute_query("DELETE FROM %s where %s='$s'"%(table,field,value))
   
      
         
      
   def get_db_from_se(self,se):
      self.execute_query("SELECT db FROM db,se,db_se WHERE se.se='%s' and se.se_id=db_se.se_id and db_se.db_id = db.db_id"%(se))
   
   def get_se_from_db(self,db):
      self.execute_query("SELECT se FROM db,se,db_se WHERE db.db='%s' and db.db_id=db_se.db_id and db_se.se_id = se.se_id"%(db))

   def get_ses(self): 
      self.execute_query("SELECT se FROM se")

   

   def add_replica(self,db,se):

         try:
            self.begin_transaction()
            id_se=self.insert("se","se_id","se",se)
            id_db=self.insert("db","db_id","db",db)
            result=self.insert_relation("db_se","se_id",id_se,"db_id",id_db)

            if result==0:
               self.commit_transaction()
               return 0
            elif result==1:
               self.rollback_transaction()
               return 1
            else:
               return 2
         except:
            return 2
      
   def del_replica(self,db,se):


      try:
         
         db_id=self.select_id("db","db_id","db",db)
         se_id=self.select_id("se","se_id","se",se)
      
         if not db_id:
            return db
         if not se_id:
            return se

         if self.select_relation_id("db_se","db_id",db_id,"se_id",se_id):
            self.begin_transaction()
            self.execute_query("DELETE FROM  db_se WHERE se_id=%d and db_id=%d"%(se_id,db_id))

            self.execute_query("SELECT se_id FROM db_se WHERE se_id=%d"%(se_id))
            row=self.__cursor.fetchone()
            if not row:
               self.execute_query("DELETE FROM se WHERE se_id=%d"%(se_id))
            self.execute_query("SELECT db_id FROM db_se WHERE db_id=%d"%(db_id))
            row=self.__cursor.fetchone()
            if not row:
               self.execute_query("DELETE FROM db WHERE db_id=%d"%(db_id))
            self.commit_transaction()
            return 0
         else:
            return 1             
      except:
         self.rollback_transaction()
         return 2

   def rename_fileblock(self,olddb,newdb):

      try:
         db_id=self.select_id("db","db_id","db",olddb)

         if not db_id:
            return 1
         

         if not self.select_id("db","db_id","db",newdb):
           self.begin_transaction()
           self.execute_query("UPDATE db SET db='%s' where db_id=%d"%(newdb,db_id))
           self.commit_transaction()
           return 0
         else:
           return 3

      except:
         self.rollback_transaction() 
         return 2                                               

    

class DLS_Server:
   def __init__(self,ThreadPool,host,host_db,port,user,passwd,database,socket_db,verbose):
      self.__host=host
      self.__port=port
      self.__user=user
      self.__database=database
      self.__socket_db=socket_db
      self.__verbose=verbose
      self.__passwd=passwd
      self.__host_db=host_db
      """ Initialize the thread and remember the pool. """
      self.__ThreadPool = ThreadPool
      self.__clientPool = Queue.Queue ( 0 )
      self.__Pool = []
      self.__startPool=True

# rotating file when the file hits 5MB size, 3 most recent files are kept
      logHandler = RotatingFileHandler('DLSServer.log',"a", 5000000, 3)
      logFormatter = logging.Formatter("%(asctime)s:%(module)s:%(levelname)s:%(message)s")
      logHandler.setFormatter(logFormatter)
      logging.getLogger().addHandler(logHandler)
      logging.getLogger().setLevel(logging.INFO)
                                                                                                              
      logging.info("DLS Server Started with host:%s port:%s  db_host:%s db_socket:%s"%(host,port,self.__host_db,self.__socket_db))

 
   def checkConnections(self):
      for thread in self.__Pool:
         if self.__verbose:
            logging.info("Thread %s isConnected=%s"%(thread.getName(),thread.isConnected()))
            #print "Thread %s isConnected=%s"%(thread.getName(),thread.isConnected())
         if  not thread.isConnected():
            return False

      for thread in self.__Pool:
         while not thread.isWaiting():
            if not thread.isAlive():
               return False

      return True
   
      


      
   def start(self):

      #pdb.set_trace()
      
      for x in xrange (self.__ThreadPool):
         thread=ClientThread(self.__clientPool,self.__host_db,self.__user,self.__passwd,self.__database,self.__socket_db,self.__verbose)
         try:
            thread.start()
            self.__Pool.append(thread)
            while not thread.isWaiting():
               #print "Thread %s %s %s"%(thread.getName(),thread.isConnected(),thread.isWaiting())
               pass
        
            if self.__verbose:
               logging.info("Thread %s Started"%(thread.getName()))
               #print "Thread %s Started"%(thread.getName())
         except ClientThread.Internal_Error,e:
            self.close()
            logging.error("Thread Aborted")
            #print "Thread Aborted"
         


      

      if self.checkConnections():
         
      
         try:
            server = socket.socket ( socket.AF_INET, socket.SOCK_STREAM )


            server.bind ( (self.__host,self.__port)) 

            # Set Timeout to 10 Seconds 
            #server.settimeout(10.0)
            if self.__verbose:
               logging.info("Start Listening")
               #print "Start Listening"
               server.listen ( 5 )
            try:
               while True:
                  self.__clientPool.put ( server.accept() )
                  #print "Server:%s"%self.__clientPool
            except KeyboardInterrupt:
               self.stop()
               server.close()
         except:
            logging.error("Port Binded")
            #print "Port Binded"
            self.stop()
            server.close()

      else:
          self.stop()

      logging.info("Server Close")
      #print "Server Close"

   def stop(self):
        for thread in self.__Pool:
            self.__clientPool.put("Stop")
def usage():
   print "dls-server prototype 0 Giovanni Ciraolo 2005"
   print "usage: dls-server <options>"
   print "use dls-server --help for more help"
def help():
   print "dls-server prototype 0 Giovanni Ciraolo 2005"
   print "usage: dls-server <options>"
   print "--help \t\t\t\t Show this help"
   print "--verbose \t\t\t Verbose output"
   print "--host \t\t\t\t Full qualified Host name of local dls server"
   print "--host_db \t\t\t Full qualified Host name of MySQL server"
   print "--port \t\t\t\t Host port of local dls server default 18090"
   print "--user \t\t\t\t Username of SQL database"
   print "--passwd \t\t\t Password of SQL database"
   print "--database \t\t\t Database name"
   print "--socket_db \t\t\t Database socket"
   print "--num_thread \t\t\t Number of dls Server Client manager threads" 

   print "--generate Create new DLS database "                


if __name__ == "__main__":
   
   long_options=["help","verbose","host=","host_db=","port=","user=","passwd=","database=","num_thread=","socket_db="]
   # short_options="Hv:o:s:p:u:w:d:t:"
   short_options=""

   try:
      opts, args = getopt.getopt(sys.argv[1:],short_options,long_options)
   except getopt.GetoptError:
      usage()
      sys.exit(2)

   if len(opts)<1:
      usage()
      sys.exit(2)

   #pdb.set_trace()     
   host = None
   host_db = None
   socket_db = None
   port = None
   verbose = False
   user=None
   passwd=None
   database=None
   host_db=None
   num_thread=8
   for o, a in opts:
      if o =="--verbose":
         verbose = True
      if o =="--help":
         help()
         sys.exit(2)
      if o=="--host":
         host=a
      if o=="--port":
         port=int(a)
      if o=="--database":
         database=a
      if o=="--passwd":
         passwd=a
      if o=="--user":
         user=a    
      if o=="--num_thread":
         num_thread=a    
      if o=="--host_db":
         host_db=a    
      if o=="--socket_db":
         socket_db=a


   if host==None:
      host="localhost"

   if host_db==None:
      host_db="localhost"
   if user==None:
      user="root"
   if passwd==None:
      passwd=""
   if database==None:
      database="dls"

   if port==None:
      port=18080

   if num_thread==None:
      num_thread=8
   else:
      try:
         nt=int(num_thread)
      except:
         self.usage()
         print "error: --num_thread must to be integer 1-120"
         sys.exit(2)

   
   server=DLS_Server(nt,host,host_db,port,user,passwd,database,socket_db,1)
   server.start()

         




